{"generator":"Code Snippets v3.2.1","date_created":"2022-10-16 13:11","snippets":[{"name":"NewsPro App Code","scope":"global","code":"function post_featured_image_json( $data, $post, $context ) {\n  $featured_image_id = $data->data['featured_media']; \n  $featured_image_url = wp_get_attachment_image_src( $featured_image_id, 'original' );\n  if( $featured_image_url ) {\n    $data->data['featured_image_url'] = $featured_image_url[0];\n  }\n  return $data;\n}\nadd_filter( 'rest_prepare_post', 'post_featured_image_json', 10, 3 );\n\n\/\/ Add thumbnail to the rest api\nfunction post_thumbnail_image_json( $data, $post, $context ) {\n\t$featured_image_id = $data->data['featured_media']; \n\t$featured_image_url = wp_get_attachment_image_src( $featured_image_id, 'thumbnail' );\n\tif( $featured_image_url ) {\n\t  $data->data['thumbnail'] = $featured_image_url[0];\n\t}\n\treturn $data;\n  }\n\nadd_filter( 'rest_prepare_post', 'post_thumbnail_image_json', 10, 3 );\n\nadd_action( 'rest_api_init', function() {\nregister_rest_field( 'post', 'comment_count', [\n            'get_callback' => function ( $post ) {\n                return (int) wp_count_comments( $post['id'] )->approved;\n            },\n            'schema'       => [\n                'description' => 'List number of comments attached to this post.',\n                'type'        => 'integer',\n            ],\n        ] );\n});\n\n\nfunction wc_rest_user_endpoint_handler($request = null) {\n  $response = array();\n  $parameters = $request->get_json_params();\n  $username = sanitize_text_field($parameters['username']);\n  $email = sanitize_text_field($parameters['email']);\n  $password = sanitize_text_field($parameters['password']);\n  \/\/ $role = sanitize_text_field($parameters['role']);\n  $error = new WP_Error();\n  if (empty($username)) {\n    $error->add(400, __(\"Username field 'username' is required.\", 'wp-rest-user'), array('status' => 400));\n    return $error;\n  }\n  if (empty($email)) {\n    $error->add(401, __(\"Email field 'email' is required.\", 'wp-rest-user'), array('status' => 400));\n    return $error;\n  }\n  if (empty($password)) {\n    $error->add(404, __(\"Password field 'password' is required.\", 'wp-rest-user'), array('status' => 400));\n    return $error;\n  }\n\n  $user_id = username_exists($username);\n  if (!$user_id && email_exists($email) == false) {\n    $user_id = wp_create_user($username, $password, $email);\n    if (!is_wp_error($user_id)) {\n      \/\/ Ger User Meta Data (Sensitive, Password included. DO NOT pass to front end.)\n      $user = get_user_by('id', $user_id);\n      \/\/ $user->set_role($role);\n      $user->set_role('subscriber');\n      \/\/ WooCommerce specific code\n      if (class_exists('WooCommerce')) {\n        $user->set_role('customer');\n      }\n      \/\/ Ger User Data (Non-Sensitive, Pass to front end.)\n      $response['code'] = 200;\n      $response['message'] = __(\"User '\" . $username . \"' Registration was Successful\", \"wp-rest-user\");\n    } else {\n      return $user_id;\n    }\n  } else {\n    $error->add(406, __(\"Email\/Username already exists, please try 'Reset Password'\", 'wp-rest-user'), array('status' => 400));\n    return $error;\n  }\n  return new WP_REST_Response($response, 123);\n}\n\n\nadd_action('rest_api_init', 'wp_rest_user_endpoints');\n \/* Handle Register User request. *\/\nfunction wp_rest_user_endpoints($request) {\n  register_rest_route('wp\/v2', 'users\/register', array(\n    'methods' => 'POST',\n    'callback' => 'wc_rest_user_endpoint_handler',\n  ));\n}\n\n\nfunction delete_my_user_account($request) {\n\tif ( is_user_logged_in() ) {\n\t\t\/\/ Don't permit admins to delete their own accounts\n\t\tif ( current_user_can( 'manage_options' ) ) {\n\t\t\twp_send_json( array(\n\t\t\t\t'status' => 'fail',\n\t\t\t\t'title' => __( 'Error!', 'wp-delete-user-accounts' ),\n\t\t\t\t'message' => __( 'Administrators cannot delete their own accounts.', 'wp-delete-user-accounts' )\n\t\t\t) );\n\t\t}\n\n\t\t\/\/ Get the current user\n\t\t$user_id = get_current_user_id();\n\n\t\t\/\/ Get user meta\n\t\t$meta = get_user_meta( $user_id );\n\n\t\t\/\/ Delete user's meta\n\t\tforeach ( $meta as $key => $val ) {\n\t\t\tdelete_user_meta( $user_id, $key );\n\t\t}\n\n\n\t\t\/\/ Destroy user's session\n\t\twp_logout();\n\n\t\tif ( ! function_exists( 'wp_delete_user' ) ) { \n\t\t\trequire_once(ABSPATH.'wp-admin\/includes\/user.php' );\n\t\t}\n\n\t\t\/\/ Delete the user's account\n\t\t$deleted = wp_delete_user( $user_id );\n\n\n\t\tif ( $deleted ) {\n\n\t\t\t\/\/ Send success message\n\t\t\treturn array(\n\t\t\t\t'status' => 'success',\n\t\t\t\t'title' => __( 'Success!', 'wp-delete-user-accounts' ),\n\t\t\t\t'message' => __( 'Your account was successfully deleted. Fair well.', 'wp-delete-user-accounts' )\n\t\t\t) ;\n\n\t\t} else {\n\n\t\t\treturn  array(\n\t\t\t\t'status' => 'fail',\n\t\t\t\t'title' => __( 'Error!', 'wp-delete-user-accounts' ),\n\t\t\t\t'message' => __( 'Request failed.', 'wp-delete-user-accounts' )\n\t\t\t) ;\n\t\t}\n\t}\n}\n\n\nadd_action('rest_api_init', function () {\n  register_rest_route( 'remove_user\/v1', 'user\/me',array(\n                'methods'  => 'DELETE',\n                'callback' => 'delete_my_user_account'\n      ));\n});\n\n","priority":"10"}]}